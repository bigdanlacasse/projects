"""
    Map/Reduce classes used to populate metadata
"""
from storage.db import DB
from bson.code import Code

class MetaData():
    """
        Constructor
    """
    def __init__(self):
        self.collection_name = "meta"
        self.has_subtype = [
            'Armor',
            'Consumable',
            'Container',
            'Gathering',
            'Gizmo',
            'Tool',
            'Trinket',
            'UpgradeComponent',
            'Weapon'
        ]
        # Establish connection
        self.itemsConn = DB(collect="items")
    
    """
        Main method, populates meta db with results from data
        generated by several map reduce queries
    """
    def populate(self):
        results = self.get_item_types(self.collection_name)

        myConn = DB(collect=self.collection_name)
        
        for item_type in results.find():
            item_type['subtype_text'] = ''
            item_type['has_subtype'] = False
            
            # Determine if there is any subtype info to map
            if item_type['_id'] in self.has_subtype:
                item_type['subtypes'] = {}
                item_type['has_subtype'] = True
                item_type['subtype_text'] = ''
                
                # Mapping because of course they couldn't be consistent
                if item_type['_id'] == 'UpgradeComponent':
                    item_type['subtype_text'] = 'upgrade_component'
                else:
                    item_type['subtype_text'] = item_type['_id'].lower()
                               
                # Since this has subtypes, get those too
                current_subtypes = self.get_item_subtypes(item_type['_id'], item_type['subtype_text'])
                
                # Store the usefull stuff
                for subtype_info in current_subtypes.find():
                    item_type['subtypes'][subtype_info['_id']] = subtype_info['value']              
            
            # Save the data
            myConn.save(item_type)
        
        return True
    
    """
        Generate inital meta data, what types of items we have
    """
    def get_item_types(self, collection=None):        
        # Map function
        mapF = Code("function() {emit(this.type, 1); }")
        
        # Reduce function
        reduceF = Code("function(key, values) { return Array.sum(values); }")
    
        return self.itemsConn.map_reduce(mapF, reduceF, collection)

    """
        For appropriate item classes (with subtypes) generate the data
    """
    def get_item_subtypes(self, type=None, subtype_text='', collection='temp'):
        if type is not None:
            query = {'type' : type}
                
            # Map function
            mapF = Code("function() {emit(this['" + subtype_text + "']['type'], 1); }")
            
            # Reduce function
            reduceF = Code("function(key, values) { return Array.sum(values); }")
                
            # Get first result set
            return self.itemsConn.map_reduce(mapF, reduceF, collection, query)
     


""" 
    Main processing
"""
if __name__ == "__main__":
    print('Populating Meta Data.....')
    md = MetaData()
    md.populate()
    print('Done')

